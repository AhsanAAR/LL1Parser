PROG	DEC	PROG_
PROG_	DEC	PROG_
PROG_	~
DEC	KEY	IDFR	(	VARDEC	)	COL	BLOCK
COL	:
KEY	def
VARDEC	~
VARDEC	VARDECNE
VARDECNE	IDFR	VARDECNE_
VARDECNE_	,	IDFR	VARDECNE_
VARDECNE_	~
BLOCK	{	ENE	}
ENE	EXP
ENE	~
EXP	(	EXP	BINOP	EXP	)
EXP	INTLIT
EXP	if	EXP	then	COL	BLOCK	else	COL	BLOCK
EXP	while	EXP	COL	BLOCK
EXP	for	IDFR	OPLIT	(	ARGS	)	COL	BLOCK
EXP	print	(	QUOTES	STRING	QUOTES	)
EXP	KEYWORD	(	INTLIT	)
EXP	IDFR	E1
E1	~
E1	(	ARGS	)
E1	=	E2
E2	EXP
EP2	input	(	QUOTES	STRING	QUOTES	)
KEYWORD	int
KEYWORD	float
KEYWORD	str
QUOTES	"
STRING	INTLIT	STRING_
STRING_	IDFR	STRING_
STRING_	~
ARGS	ARGSNE
ARGS	~
ARGSNE	EXP	ARGSNE_
ARGSNE_	,	EXP	ARGSNE_
ARGSNE_	~
OPLIT	in
OPLIT	notin
IDFR	id
INTLIT	num
BINOP	==
BINOP	<	
BINOP	>
BINOP	<=
BINOP	>=
BINOP	+
BINOP	*
BINOP	-
BINOP	%
BINOP	/
BINOP	and
BINOP	or
BINOP	!=